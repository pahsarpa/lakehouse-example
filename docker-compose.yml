volumes:
  lakehouse-example-minio:
  lakehouse-example-rest-pg:

services:

  jupyter:
    hostname: jupyter
    image: ${JUPYTER_IMAGE_NAME:-pavelrevin/lakehouse-example-jupyter:latest}
    # build: ./docker/jupyter/
    command: start-notebook.sh --NotebookApp.token=''
    environment:
      AWS_ACCESS_KEY_ID: ${MINIO_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_PASSWORD}
      AWS_REGION: us-east-1
    ports:
      - 8888:8888
      - 4040:4040
    volumes:
      - ./configs/jupyter.pyiceberg.yaml:/home/jovyan/.pyiceberg.yaml
      - ./configs/jupyter/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
      - ./jupyter:/home/jovyan/notebooks

  spark-history:
    hostname: spark-history
    image: ${SPARK_IMAGE_NAME:-pavelrevin/lakehouse-example-spark:latest}
    # build: ./docker/spark/
    stdin_open: true
    tty: true
    restart: always
    depends_on:
      minio-s3:
        condition: service_healthy
    environment:
      SPARK_HISTORY_OPTS: '-Dspark.history.fs.logDirectory=s3a://logs/spark-history
                           -Dspark.hadoop.fs.s3a.access.key=${MINIO_USER}
                           -Dspark.hadoop.fs.s3a.secret.key=${MINIO_PASSWORD}
                           -Dspark.hadoop.fs.s3a.endpoint=http://minio-s3:9080
                           -Dspark.hadoop.fs.s3a.path.style.access=true
                           -Dspark.hadoop.fs.s3a.connection.ssl.enabled=false
                           -Dspark.hadoop.fs.s3a.impl=org.apache.hadoop.fs.s3a.S3AFileSystem'
    ports:
      - 18080:18080
    command: '/opt/spark/bin/spark-class org.apache.spark.deploy.history.HistoryServer'

  minio-s3:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
      MINIO_DOMAIN: minio-s3
    ports:
      - "9086:9080"
      - "9077:9070"
    command: server /data --address ":9080" --console-address ":9070"
    volumes:
      - lakehouse-example-minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9080/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-s3-init:
    image: minio/mc
    depends_on:
      minio-s3:
        condition: service_healthy
    environment:
      MINIO_USER: ${MINIO_USER}
      MINIO_PASSWORD: ${MINIO_PASSWORD}
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio-s3:9080 ${MINIO_USER} ${MINIO_PASSWORD};
      /usr/bin/mc mb myminio/{logs,warehouse};
      /usr/bin/mc mb myminio/logs/spark-history;
      exit 0;
      "

  iceberg-rest:
    image: tabulario/iceberg-rest
    hostname: iceberg-rest
    restart: always
    ports:
      - 8182:8181
    environment:
      AWS_ACCESS_KEY_ID: ${MINIO_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_PASSWORD}
      AWS_REGION: us-east-1
      CATALOG_S3_ENDPOINT: http://minio-s3:9080
      CATALOG_WAREHOUSE: s3://warehouse/iceberg_rest/
      CATALOG_IO__IMPL: org.apache.iceberg.aws.s3.S3FileIO
      CATALOG_S3_PATH__STYLE__ACCESS: true
      CATALOG_URI: jdbc:postgresql://iceberg-rest-db:5432/metastore_db?user=${ICEBERG_REST_DB_USER}&amp;password=${ICEBERG_REST_DB_PASSWORD}
      CATALOG_JDBC_DRIVER: org.postgresql.Driver
      CATALOG_JDBC_USER: ${ICEBERG_REST_DB_USER}
      CATALOG_JDBC_PASSWORD: ${ICEBERG_REST_DB_PASSWORD}
    depends_on:
      iceberg-rest-db:
        condition: service_healthy

  iceberg-rest-db:
    image: postgres:15.1-bullseye
    restart: always
    environment:
      POSTGRES_DB: 'metastore_db'
      POSTGRES_USER: ${ICEBERG_REST_DB_USER}
      POSTGRES_PASSWORD: ${ICEBERG_REST_DB_PASSWORD}
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "iceberg", "-d", "metastore_db" ]
      interval: 10s
      retries: 5
      start_period: 5s
    ports:
      - '5441:5432'
    volumes:
      - lakehouse-example-rest-pg:/var/lib/postgresql/data

  trino:
    image: "trinodb/trino:466"
    restart: always
    ports:
      - "8084:8080"
    environment:
      ICEBERG_REST_DB_USER: ${ICEBERG_REST_DB_USER}
      ICEBERG_REST_DB_PASSWORD: ${ICEBERG_REST_DB_PASSWORD}
      AWS_ACCESS_KEY_ID: ${MINIO_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_PASSWORD}
      AWS_REGION: us-east-1
    volumes:
      - ./configs/trino:/etc/trino/catalog
